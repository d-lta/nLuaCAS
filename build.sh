#!/usr/bin/env bash
#
# build.sh: Manages the Lua project build process.
#           Ensures the repository is clean before building, concatenates
#           modules, and strips require() statements.

# Exit immediately if a command exits with a non-zero status.
set -e

# Treat unset variables as an error when substituting.
set -u

# The return value of a pipeline is the status of the last command
# to exit with a non-zero status, or zero if all commands exit successfully.
set -o pipefail

# ------------------------------------------------------------------------------
# Configuration
# ------------------------------------------------------------------------------

# List of source Lua files, ordered by dependency.
declare -a LUA_SOURCE_FILES=(
  "src/errors.lua"
  "src/ast.lua"
  "src/parser.lua"
  "src/factorial.lua"
  "src/simplify.lua"
  "src/tensor.lua"
  "src/trig.lua"
  "src/derivative.lua"
  "src/integrate.lua"
  "src/constants.lua"
  "src/series.lua"
  "src/solve.lua"
  "src/init.lua"
  "src/gui.lua"
)

# Output filename for the final build.
readonly OUTPUT_FILE="build.lua"

# ------------------------------------------------------------------------------
# Main Logic
# ------------------------------------------------------------------------------

# Step 1: Check for uncommitted changes in the repository.
echo "Checking repository for uncommitted changes..."

# The `git diff --quiet` command returns a non-zero exit code if there are changes.
if ! git diff --quiet --ignore-all-space; then
  
  # A more verbose diff to count the lines changed.
  lines_changed=$(git diff --ignore-all-space | grep -E '^[+-]' | wc -l)
  
  echo "Error: Uncommitted changes found."
  echo "Lines changed (excluding whitespace): $lines_changed."
  
  # Prompt the user for an interactive choice.
  read -p "Would you like to view the full diff? (y/n) " -n 1 -r
  echo 
  
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "--- BEGIN: Uncommitted Changes ---"
    git diff
    echo "--- END: Uncommitted Changes ---"
  fi
  
  # Exit with an error to stop the build.
  exit 1
else
  echo "Working directory is clean."
fi

# Step 2: Concatenate source files into the new build.
if [[ -f "$OUTPUT_FILE" ]]; then
  mv "$OUTPUT_FILE" "${OUTPUT_FILE%.lua}.prev.lua"
  echo "Existing build found. Renamed to ${OUTPUT_FILE%.lua}.prev.lua."
fi

echo "Starting build process..."
printf '%s\n' "-- Autogenerated build. Do not edit this file by hand." > "$OUTPUT_FILE"

for f in "${LUA_SOURCE_FILES[@]}"; do
  if [[ ! -f "$f" ]]; then
    echo "Error: Missing source file '$f'." >&2
    exit 1
  fi

  # Add a machine-readable start marker.
  printf '\n-- --- BEGIN: %s ---\n' "$f" >> "$OUTPUT_FILE"

  # Concatenate the file, stripping lines that contain require().
  grep -vE '^[[:space:]]*require\(' "$f" >> "$OUTPUT_FILE"

  # Add a machine-readable end marker.
  printf '\n-- --- END: %s ---\n' "$f" >> "$OUTPUT_FILE"
done

echo "Build succeeded: $OUTPUT_FILE."